#
#    Copyright 2021, NTT Communications Corp.
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#

import logging
from typing import Any, Dict

import pandas as pd
from prompt_toolkit.shortcuts import checkboxlist_dialog

log = logging.getLogger(__name__)


def select_efficient_ioc(source_of_truth_with_family: Dict[str, Any]) -> pd.DataFrame:
    """Node for selecting ioc to search.
    """
    # 組織の環境に合わせて利用するIOCを選択する
    filepath_list = []
    hash_list = []
    registry_list = []
    domain_list = []

    # 自組織で使用できるIOCだけを選択
    for report in source_of_truth_with_family['reports']:
        filepath_list.extend(
            [file['filename'] for file in report['file_activities']]
        )
        hash_list.extend(
            [file['sha256'] for file in report['file_activities']]
        )

        registry_list.extend(
            [registry['key'] for registry in report['registry_activities']]
        )

        if len(report['network_activities']) > 0:
            domain_list.extend(
                [dns['domain'] for dns in
                 report['network_activities']['dns']]
            )

    # 重複を排除
    filepath_list = list(set(filepath_list))
    hash_list = list(set(hash_list))
    registry_list = list(set(registry_list))
    domain_list = list(set(domain_list))

    # Create dataframe
    df_ioc = pd.DataFrame([], columns=['category', 'value'])

    registry_list = checkboxlist_dialog(
        title="IOC selection (Registry)",
        text="Choose IOC to use for detecting infection",
        values=[(registry, registry) for registry in registry_list]
    ).run()

    domain_list = checkboxlist_dialog(
        title="IOC selection (Domain)",
        text="Choose IOC to use for detecting infection",
        values=[(domain, domain) for domain in domain_list]
    ).run()

    df_ioc = pd.DataFrame(
        [['registry', registry] for registry in registry_list] +
        [['domain', domain] for domain in domain_list],
        columns=['category', 'value']
    )
    return df_ioc
