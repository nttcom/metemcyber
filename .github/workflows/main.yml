# This is a basic workflow to help you get started with Actions
# Reference: https://github.com/PyCQA/pylint/blob/master/.github/workflows/ci.yaml

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  CACHE_VERSION: 1
  DEFAULT_PYTHON: 3.8
  PYTHON_ROOT_DIRS: metemcyber
  PIPENV_VENV_IN_PROJECT: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    outputs:
      python-key: ${{ steps.generate-python-key.outputs.key }}
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Check out code from GitHub
        uses: actions/checkout@v2
      - name: Set up Python ${{ env.DEFAULT_PYTHON }}
        id: python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}
      - name: Generate partial Python venv restore key
        id: generate-python-key
        run: >-
          echo "::set-output name=key::base-venv-${{ env.CACHE_VERSION }}-${{
            hashFiles('Pipfile.lock')
          }}"
      - name: Restore Python virtual environment
        id: cache-venv
        uses: actions/cache@v2
        with:
          path: .venv
          key: >-
            ${{ runner.os }}-${{ steps.python.outputs.python-version }}-${{
              steps.generate-python-key.outputs.key
            }}
          restore-keys: |
            ${{ runner.os }}-${{ steps.python.outputs.python-version }}-base-venv-${{ env.CACHE_VERSION }}-
      - name: Create Python virtual environment
        # if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          apt update
          apt install -y build-essential python3-dev
          pip install pipenv
          pipenv --python 3.8
          pipenv run python -m pip install -U pip
          pipenv install --dev
      # Runs a linter for python
      - name: Run formatting check
        run: |
          pipenv run isort ${{ env.PYTHON_ROOT_DIRS }} --diff --check-only
          pipenv run pylint ${{ env.PYTHON_ROOT_DIRS }} --score=n
          pipenv run mypy ${{ env.PYTHON_ROOT_DIRS }} --show-error-codes --no-error-summary
